/*
在编写CSS3样式时，不同的浏览器可能需要不同的前缀。它表示该CSS属性或规则尚未成为W3C标准的一部分，是浏览器的私有属性，虽然目前较新版本的浏览器都是不需要前缀的，但为了更好的向前兼容前缀还是少不了的
前缀      浏览器
-webkit  chrome和safari
-moz     firefox
-ms		 IE
-o       opera
*/

/*
圆角效果 border-radius

eg1:
border-radius:10px;  所有角都使用半径为10px的圆角 
eg2:
border-radius: 5px 4px 3px 2px; /* 四个半径值分别是左上角、右上角、右下角和左下角，顺时针 
eg3:实心上半圆
方法：把高度(height)设为宽度（width）的一半，并且只设置左上角和右上角的半径与元素的高度一致（大于也是可以的）:
div{
    height:50px;是width的一半
    width:100px;
    background:#9da;
    border-radius:50px 50px 0 0;半径至少设置为height的值
    }
eg4:实心圆：
方法：把宽度（width）与高度(height)值设置为一致（也就是正方形），并且四个圆角值都设置为它们值的一半。
div{
    height:100px;与width设置一致
    width:100px;
    background:#9da;
    border-radius:50px;四个圆角值都设置为宽度或高度值的一半
    }

*/ 

/*
阴影 box-shadow
box-shadow: X轴偏移量 Y轴偏移量 [阴影模糊半径] [阴影扩展半径] [阴影颜色] [投影方式];

值				 描述
X轴偏移量		必需。水平阴影的位置。允许负值。
Y轴偏移量		必需。垂直阴影的位置。允许负值。
阴影模糊半径		可选。模糊距离。
阴影扩展半径		可选。阴影的尺寸。
阴影颜色			可选。阴影的颜色。省略默认黑色。
投影方式 		可选（设置inset时为内部阴影方式，省略为外阴影方式)。

阴影模糊半径与阴影扩展半径的区别:
阴影模糊半径：此参数可选，其值只能是为正值，如果其值为0时，表示阴影不具有模糊效果，其值越大阴影的边缘就越模糊；
阴影扩展半径：此参数可选，其值可以是正负值，如果值为正，则整个阴影都延展扩大，反之值为负值时，则缩小；

eg1:
内阴影
.box_shadow{
  box-shadow:4px 2px 6px #333333 inset; 
}
eg2:
外阴影
.box_shadow{
  box-shadow:4px 2px 6px #333333; 
}
eg3:
多个阴影(如果添加多个阴影，只需用逗号隔开即可)
.box_shadow{
    box-shadow:4px 2px 6px #f00, -4px -2px 6px #000, 0px 0px 12px 5px #33CC00 inset;
}
*/

/*
CSS3边框 为边框应用图片 border-image
eg:
border-image: url(xx.jpg) 70 70 70 70 round;
url:图片路径
70 70 70 70 切割图片的宽度，单位为像素，但省略px也可以使用百分比，遵循顺时针的规律来分别设置。
round 图片延伸方式 三个可选参数分别为：
round(平铺)
repeat(重复)
stretch(拉伸)
*/

/*
CSS3颜色 

RGBA
语法：
color：rgba(R,G,B,A)
以上R、G、B三个参数，正整数值的取值范围为：0 - 255。百分数值的取值范围为：0.0% - 100.0%。超出范围的数值将被截至其最接近的取值极限。并非所有浏览器都支持使用百分数值。A为透明度参数，取值在0~1之间，不可为负值。
eg:
background-color:rgba(100,120,60,0.5);

渐变色彩 
线性渐变
角度		用英文	    作用
0deg    to top     从下向上
90deg   to right   从左向右
180deg  to bottom  从上到下
270deg  to left    从右向左
      to top left  右下角到左上角
	  to top right 左下角到右上角
eg:
background-image:linear-gradient(to top left, #fff,#999);
*/

/*
文字与字体
text-overflow用来设置是否使用一个省略标记（...）标示对象内文本的溢出
剪切： text-overflow:clip;
表示显示省略标记： text-overflow:ellipsis;
text-overflow只是用来说明文字溢出时用什么方式显示，要实现溢出时产生省略号的效果，还须定义强制文本在一行内显示（white-space:nowrap）及溢出内容为隐藏（overflow:hidden），只有这样才能实现溢出文本显示省略号的效果：
text-overflow:ellipsis; 
overflow:hidden; 
white-space:nowrap;

word-wrap也可以用来设置文本行为，当前行超过指定容器的边界时是否断开转行
表示控制连续文本换行： word-wrap:normal;
表示内容将在边界内换行：word-wrap:break-word;
normal为浏览器默认值，break-word设置在长单词或 URL地址内部进行换行，此属性不常用，用浏览器默认值即可。

嵌入字体@font-face
@font-face能够加载服务器端的字体文件，让浏览器端可以显示用户电脑里没有安装的字体。
语法:
@font-face {
    font-family : 字体名称;
    src : 字体文件在服务器上的相对或绝对路径;
}

文本阴影text-shadow
语法：
text-shadow: X-Offset Y-Offset blur color;
X-Offset：表示阴影的水平偏移距离，其值为正值时阴影向右偏移，反之向左偏移；      
Y-Offset：是指阴影的垂直偏移距离，如果其值是正值时，阴影向下偏移，反之向上偏移；
Blur：是指阴影的模糊程度，其值不能是负值，如果值越大，阴影越模糊，反之阴影越清晰，如果不需要阴影模糊可以将Blur值设置为0；
Color：是指阴影的颜色，其可以使用rgba色。
eg:
text-shadow: 0 1px 1px #fff
*/


/*
背景 

background-origin 设置元素背景图片的原始起始位置
语法：
background-origin ： border-box | padding-box | content-box;
参数分别表示背景图片是从边框，还是内边距（默认值），或者是内容区域开始显示。

background-clip 用来将背景图片做适当的裁剪以适应实际需要。
语法：
background-clip ： border-box | padding-box | content-box | no-clip
参数分别表示从边框、或内填充，或者内容区域向外裁剪背景。no-clip表示不裁切，和参数border-box显示同样的效果。backgroud-clip默认值为border-box。

background-size 设置背景图片的大小，以长度值或百分比显示，还可以通过cover和contain来对图片进行伸缩。
语法：
background-size: auto | <长度值> | <百分比> | cover | contain
取值说明：
1、auto：默认值，不改变背景图片的原始高度和宽度；
2、<长度值>：成对出现如200px 50px，将背景图片宽高依次设置为前面两个值，当设置一个值时，将其作为图片宽度值来等比缩放；
3、<百分比>：0％~100％之间的任何值，将背景图片宽高依次设置为所在元素宽高乘以前面百分比得出的数值，当设置一个值时同上；
4、cover：顾名思义为覆盖，即将背景图片等比缩放以填满整个容器；
5、contain：容纳，即将背景图片等比缩放至某一边紧贴容器边缘为止。

multiple backgrounds 多重背景
语法缩写：
background ： [background-color] | [background-image] | [background-position][/background-size] | [background-repeat] | [background-attachment] | [background-clip] | [background-origin],...
background-repeat : repeat1,repeat2,...,repeatN;
backround-position : position1,position2,...,positionN;
background-size : size1,size2,...,sizeN;
background-attachment : attachment1,attachment2,...,attachmentN;
background-clip : clip1,clip2,...,clipN;
background-origin : origin1,origin2,...,originN;
background-color : color;
*/

/*
选择器
E[att^="val"] 选择匹配元素E，且E元素定义的属性att，其属性值以val开头的任何字符串
E[att$="val"] 选择匹配元素E，且元素E定义了属性att，其属性值以val结尾的任何字符串
E[att*="val"] 选择匹配元素E，且E元素定义了属性att，其属性值任意位置包含了“val"

E:root 匹配元素E所在的文档的根元素;

E:not() 排除E元素中()中内容;
eg:
input:not([type="submit"]){
	border:1px solid red;
};

:empty 选择E元素中没有任何内容的元素;
:target 匹配文档(页面)的url的某个标志符的目标元素;
:first-child 选择元素中的第一个子元素
:last-child 选择元素中的最后一个子元素
:nth-child(n) 定位某个父元素的一个或多个特定的子元素（其中“n”是其参数，而且可以是整数值(1,2,3,4)，也可以是表达式(2n+1、-n+5)和关键词(odd、even)，但参数n的起始值始终是1，而不是0。也就是说，参数n的值为0时，选择器将选择不到任何匹配的元素。）
:nth-last-child(n) 从某父元素的最后一个子元素开始计算，来选择特定的元素
:first-of-type 定位一个父元素下的某个类型的第一个子元素
:nth-of-type(n) 定位一个父元素下的某个类型的第n个子元素
:last-of-type 定位一个父元素下的某个类型的最后一个子元素
:nth-last-of-type(n) 从某父元素的最后一个子元素开始计算,定位一个父元素下的某个类型的第n个子元素
:only-child 匹配的元素的父元素中仅有一个子元素，而且是一个唯一的子元素
:only-of-type 选择一个元素是它的父元素的唯一一个相同类型的子元素

:enabled 匹配可用表单元素
:disabled 匹配不可用表单元素
:checked 匹配选中表单元素
::selection 匹配突出显示的文本（注意： IE9+、Opera、Google Chrome 以及 Safari 中支持 ::selection 选择器。Firefox 支持替代的 ::-moz-selection ）
:read-only 匹配处于只读状态元素
:read-write 匹配非只读状态元素
::before和::after 用来给元素的前面或后面插入内容，这两个常和"content"配合使用，使用的场景最多的就是清除浮动
*/ 

/*
变形
rotate() 旋转函数(如果这个值为正值，元素相对原点中心顺时针旋转；如果这个值为负值，元素相对原点中心逆时针旋转)
eg:
----------------------------------------------
<div class="wrapper">
  <div></div>
</div>

.wrapper {
  width: 200px;
  height: 200px;
  border: 1px dotted red;
  margin: 100px auto;
}
.wrapper div {
  width: 200px;
  height: 200px;
  background: orange;
  -webkit-transform: rotate(45deg);
  transform: rotate(45deg);
}
-------------------------------------------------

skew() 扭曲函数,将一个对象以其中心位置围绕着X轴和Y轴按照一定的角度倾斜
Skew()具有三种情况：
1、skew(x,y)使元素在水平和垂直方向同时扭曲（X轴和Y轴同时按一定的角度值进行扭曲变形）；第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则值为0，也就是Y轴方向上无斜切。
2、skewX(x)仅使元素在水平方向扭曲变形（X轴扭曲变形）；
3、skewY(y)仅使元素在垂直方向扭曲变形（Y轴扭曲变形）

scale() 缩放函数,让元素根据中心原点对对象进行缩放。
缩放 scale 具有三种情况：
1、 scale(X,Y)使元素水平方向和垂直方向同时缩放（也就是X轴和Y轴同时缩放） 注意：Y是一个可选参数，如果没有设置Y值，则表示X，Y两个方向的缩放倍数是一样的
2、scaleX(x)元素仅水平方向缩放（X轴缩放）
3、scaleY(y)元素仅垂直方向缩放（Y轴缩放）
注意： scale()的取值默认的值为1，当值设置为0.01到0.99之间的任何值，作用使一个元素缩小；而任何大于或等于1.01的值，作用是让元素放大。

translate() 位移函数 将元素向指定的方向移动
translate我们分为三种情况：
1、translate(x,y)水平方向和垂直方向同时移动（也就是X轴和Y轴同时移动）
2、translateX(x)仅水平方向移动（X轴移动）
3、translateY(Y)仅垂直方向移动（Y轴移动）

matrix() 矩阵

transition-property:指定过渡或动态模拟的CSS属性
transition-duration:指定完成过渡所需的时间
transition-timing-function:指定过渡函数
transition-delay:指定开始出现的延迟时间

*/

/*
布局

多列布局 Columns
语法：
columns：<column-width> || <column-count>   columns：主要用来定义多列中每列的宽度 || 主要用来定义多列中的列数
多列布局columns属性参数主要就两个属性参数：列宽和列数
eg:
要显示2栏显示，每栏宽度为200px，代码为： columns: 200px 2;

多列布局 column-width
语法：
column-width: auto | <length>                 column-width: 如果column-width设置值为auto或者没有显式的设置值时，元素多列的列宽将由其他属性来决定，比如前面的示例就是由列数column-count来决定。 | 	
使用固定值来设置元素列的宽度，其主要是由数值和长度单位组成，不过其值只能是正值，不能为负值。

多列布局 column-count
语法：
column-count：auto | <integer>                 column-count：此值为column-count的默认值，表示元素只有一列，其主要依靠浏览器计算自动设置。| 此值为正整数值，主要用来定义元素的列数，取值为大于0的整数，负值无效。
eg:
将列分成四列显示，代码如下：column-count:4;


列间距column-gap
语法：
column-gap: normal || <length>                  column-gap:默认值，默值为1em（如果你的字号是px，其默认值为你的font-size值）。|| 此值用来设置列与列之间的距离，其可以使用px,em单位的任何整数值，但不能是负值。
eg:
将内容分三列显列，列与列之间的间距为2em，实现代码为：
column-count: 3;
column-gap: 2em;

列表边框column-rule
语法：
column-rule:<column-rule-width>|<column-rule-style>|<column-rule-color>
column-rule:类似于border-width属性，主要用来定义列边框的宽度，其默认值为“medium”，column-rule-width属性接受任意浮点数，但不接收负值。但也像border-width属性一样，可以使用关键词：medium、thick和thin。|类似于border-style属性，主要用来定义列边框样式，其默认值为“none”。column-rule-style属性值与border-style属值相同，包括none、hidden、dotted、dashed、solid、double、groove、ridge、inset、outset。|类似于border-color属性，主要用来定义列边框颜色，其默认值为前景色color的值，使用时相当于border-color。column-rule-color接受所有的颜色。如果不希望显示颜色，也可以将其设置为transparent(透明色)
eg:
为了能有效区分栏目列之间的关系，可以为其设置一个列边框，代码为： column-rule: 2px dotted green;

跨列设置column-span
column-span主要用来定义一个分列元素中的子元素能跨列多少。column-width、column-count等属性能让一元素分成多列，不管里面元素如何排放顺序，他们都是从左向右的放置内容，但有时我们需要基中一段内容或一个标题不进行分列，也就是横跨所有列
语法：
column-span: none | all                             column-span:此值为column-span的默认值，表示不跨越任何列。 | 这个值跟none值刚好相反，表示的是元素跨越所有列，并定位在列的Ｚ轴之上。
eg:
将第一个标题跨越所有列，代码：column-span:all;

*/


/*
CSS3 盒子模型
box-sizing属性，能够事先定义盒模型的尺寸解析方式，其语法规则如下：
box-sizing: content-box | border-box | inherit
content-box,默认值，其让元素维持W3C的标准盒模型，也就是说元素的宽度和高度（width/height）等于元素边框宽度（border）加上元素内距（padding）加上元素内容宽度或高度（content width/ height），也就是element width/height = border + padding + content width / height
border-box,重新定义CSS2.1中盒模型组成的模式，让元素维持IE传统的盒模型（IE6以下版本和IE6-7怪异模式），也就是说元素的宽度或高度等于元素内容的宽度或高度。从上面盒模型介绍可知，这里的内容宽度或高度包含了元素的border、padding、内容的宽度或高度（此处的内容宽度或高度＝盒子的宽度或高度—边框—内距）。
inherit,使元素继承父元素的盒模型模式



伸缩布局
伸缩布局功能主要具有以下几点：
第一，屏幕和浏览器窗口大小发生改变也可以灵活调整布局；
第二，可以指定伸缩项目沿着主轴或侧轴按比例分配额外空间（伸缩容器额外空间），从而调整伸缩项目的大小；
第三，可以指定伸缩项目沿着主轴或侧轴将伸缩容器额外空间，分配到伸缩项目之前、之后或之间；
第四，可以指定如何将垂直于元素布局轴的额外空间分布到该元素的周围；
第五，可以控制元素在页面上的布局方向；
第六，可以按照不同于文档对象模型（DOM）所指定排序方式对屏幕上的元素重新排序。也就是说可以在浏览器渲染中不按照文档流先后顺序重排伸缩项目顺序。

1.创建一个flex容器
任何一个flexbox布局的第一步是需要创建一个flex容器。为此给元素设置display属性的值为flex。在Safari浏览器中，你依然需要添加前缀-webkit，
.flexcontainer{ display: -webkit-flex; display: flex; }

2.Flex项目显示
Flex项目是Flex容器的子元素。他们沿着主要轴和横轴定位。默认的是沿着水平轴排列一行。你可以通过flex-direction来改变主轴方向修改为column，其默认值是row。

3.Flex项目列显示
.flexcontainer{ display: -webkit-flex; display: flex; -webkit-flex-direction: column; flex-direction: column; }

4.Flex项目移动到顶部
如何将flex项目移动到顶部，取决于主轴的方向。如果它是垂直的方向通过align-items设置；如果它是水平的方向通过justify-content设置。
.flexcontainer{ -webkit-flex-direction: column; flex-direction: column; -webkit-justify-content: flex-start; justify-content: flex-start; }
.flexcontainer{ display: -webkit-flex; display: flex; -webkit-flex-direction: row; flex-direction: row; -webkit-align-items: flex-start; align-items: flex-start; }

5.Flex项目移到左边
flex项目称动到左边或右边也取决于主轴的方向。如果flex-direction设置为row，设置justify-content控制方向；如果设置为column，设置align-items控制方向。
.flexcontainer{ display: -webkit-flex; display: flex; -webkit-flex-direction: row; flex-direction: row; -webkit-justify-content: flex-start; justify-content: flex-start; }
.flexcontainer{ display: -webkit-flex; display: flex; -webkit-flex-direction: column; flex-direction: column; -webkit-align-items: flex-start; align-items: flex-start; }

6.Flex项目移动右边
.flexcontainer{ display: -webkit-flex; display: flex; -webkit-flex-direction: row; flex-direction: row; -webkit-justify-content: flex-end; justify-content: flex-end; }
.flexcontainer{ display: -webkit-flex; display: flex; -webkit-flex-direction: column; flex-direction: column; -webkit-align-items: flex-end; align-items: flex-end; }

7.水平垂直居中
在Flexbox容器中制作水平垂直居中是微不足道的。设置justify-content或者align-items为center。另外根据主轴的方向设置flex-direction为row或column。
.flexcontainer{ display: -webkit-flex; display: flex; -webkit-flex-direction: row; flex-direction: row; -webkit-align-items: center; align-items: center; -webkit-justify-content: center; justify-content: center; }
.flexcontainer{ display: -webkit-flex; display: flex; -webkit-flex-direction: column; flex-direction: column; -webkit-align-items: center; align-items: center; -webkit-justify-content: center; justify-content: center; }

8.Flex项目实现自动伸缩
您可以定义一个flex项目，如何相对于flex容器实现自动的伸缩。需要给每个flex项目设置flex属性设置需要伸缩的值。
.bigitem{ -webkit-flex:200; flex:200; }  .smallitem{ -webkit-flex:100; flex:100; }

*/

/*
Media Queries——媒体类型
Media Queries是CSS3新增加的一个模块功能，其最大的特色就是通过CSS3来查询媒体，然后调用对应的样式
媒体类型（Media Type）在CSS2中是一个常见的属性，也是一个非常有用的属性，可以通过媒体类型对不同的设备指定不同的样式。
在CSS2中常用的是all(全部)、screen(屏幕)、print(页面打印或打印预览模式)
媒体类型的引用方法也有多种，常见的有：link标签、@import和CSS3新增的@media几种：

link方法
link方法引入媒体类型其实就是在<link>标签引用样式的时候，通过link标签中的media属性来指定不同的媒体类型。如下所示。
eg:
<link rel="stylesheet" type="text/css" href="style.css" media="screen" />
<link rel="stylesheet" type="text/css" href="print.css" media="print" />

@import方法
@import可以引用样式文件，同样也可以用来引用媒体类型。@import引入媒体类型主要有两种方式，一种是在样式中通过@import调用另一个样式文件；另一种方法是在<head></head>标签中的<style></style>中引入，但这种使用方法在IE6~7都不被支持，如样式文件中调用另一个样式文件时，就可以指定对应的媒体类型。
eg:
@importurl(reset.css) screen;   
@importurl(print.css) print;
在<head>中的<style>标签中引入媒体类型方法。
<head>
<style type="text/css">
    @importurl(style.css) all;
</style>
</head>

@media方法
@media是CSS3中新引进的一个特性，被称为媒体查询。在页面中也可以通过这个属性来引入媒体类型。@media引入媒体类型和@import有点类似也具有两方式。
（1）在样式文件中引用媒体类型：
@media screen {
   选择器{你的样式代码写在这里…}
}
（2）使用@media引入媒体类型的方式是在<head>标签中的<style>中引用。
<head>
<style type="text/css">
    @media screen{
    选择器{你的样式代码写在这里…}
}
</style>
</head>


Media Queries的使用方法
(CSS3 Media Queries得到了众多浏览器支持，除了IE6-8浏览器不支持之外，在所有现代浏览器中都可以完美支持。还有一个与众不同的时，Media Queries在其他浏览器中不要像其他CSS3属性一样在不同的浏览器中添加前缀。):
@media 媒体类型and （媒体特性）{你的样式}
eg:
1. 最大宽度max-width(媒体类型小于或等于指定的宽度时，样式生效)
@media screen and (max-width:480px){
 .ads {
   display:none;
  }
}

2.最小宽度min-width(媒体类型大于或等于指定宽度时，样式生效)
@media screen and (min-width:900px){
.wrapper{width: 980px;}
}

3.多个媒体特性使用
当屏幕在600px~900px之间时，body的背景色渲染为“#f5f5f5”:
@media screen and (min-width:600px) and (max-width:900px){
  body {background-color:#f5f5f5;}
}

4.设备屏幕的输出宽度Device Width
在智能设备上，例如iPhone、iPad等，还可以根据屏幕设备的尺寸来设置相应的样式（或者调用相应的样式文件）。同样的，对于屏幕设备同样可以使用“min/max”对应参数，如“min-device-width”或者“max-device-width”
<link rel="stylesheet" media="screen and (max-device-width:480px)" href="iphone.css" />

5. not关键词
使用关键词“not”是用来排除某种制定的媒体类型，也就是用来排除符合表达式的设备。换句话说，not关键词表示对后面的表达式执行取反操作，如：
@media not print and (max-width: 1200px){样式代码}
上面代码表示的是：样式代码将被使用在除打印设备和设备宽度小于1200px下所有设备中。

6.only关键词
only用来指定某种特定的媒体类型，可以用来排除不支持媒体查询的浏览器。
<linkrel="stylesheet" media="only screen and (max-device-width:240px)" href="android240.css" />
*/

/*
Responsive设计(响应式设计)
一些术语：
1.流体网格
流体网格是一个简单的网格系统，这种网格设计参考了流体设计中的网格系统，将每个网格格子使用百分比单位来控制网格大小。这种网格系统最大的好处是让你的网格大小随时根据屏幕尺寸大小做出相对应的比例缩放。
2.弹性图片
弹性图片指的是不给图片设置固定尺寸，而是根据流体网格进行缩放，用于适应各种网格的尺寸。而实现方法是比较简单，一句代码就能搞定的事情。img {max-width:100%;}
3.媒体查询
媒体查询在CSS3中得到了强大的扩展。使用这个属性可以让你的设计根据用户终端设备适配对应的样式。这也是响应式设计中最为关键的。可以说Responsive设计离开了Medial Queries就失去了他生存的意义。简单的说媒体查询可以根据设备的尺寸，查询出适配的样式。Responsive设计最关注的就是：根据用户的使用设备的当前宽度，你的Web页面将加载一个备用的样式，实现特定的页面风格。
4.屏幕分辨率
5.主要断点
设备宽度的临界点。在Media Queries中，其中媒体特性“min-width”和“max-width”对应的属性值就是响应式设计中的断点值。简单点说，就是使用主要断点和次要断点，创建媒体查询的条件。而每个断点会对应调用一个样式文件（或者样式代码）


Responsive布局技巧

Responsive布局中，可以毫无保留的丢弃：
第一， 尽量少用无关紧要的div；
第二，不要使用内联元素（inline）；
第三，尽量少用JS或flash；
第四，丢弃没用的绝对定位和浮动样式；
第五，摒弃任何冗余结构和不使用100%设置。

帮助Responsive确定更好的布局
第一，使用HTML5 Doctype和相关指南；
第二，重置好你的样式（reset.css）；
第三，一个简单的有语义的核心布局；
第四，给重要的网页元素使用简单的技巧，比如导航菜单之类元素。

meta标签
使用方法如下
<meta name=”viewport” content=”” />
content属性值   详细描述
width 		    可视区域的宽度，其值可以是一个具体数字或关键字device-width
height 			可视区域的高度，其值可以是一个具体数字或关键字device-higth
initial-scale   页面首次被显示时可视区域的缩放级别，取值为1.0时将使页面按实际尺寸显示，无任何缩放
minimun-scale   可视区域的最小缩放级别，表示用户可以将页面缩小的程度，取值为1.0时将禁止用户缩放至实际尺寸以下
maximun-scale   可视区域的最大缩放级别，表示用户可以将页面放大的程度，取值为1.0时将禁止用户放大至实际尺寸以上
user-scalable   指定用户是否可以对页面进行缩放，设置为yes将允许缩放,no为禁止缩放

不同设备的分辨率设置
1.Xpx显屏
@media screen and (max-width : Xpx) {}   
2.iPad横板显屏
@media screen and (max-device-width: 1024px) and (orientation: landscape) {}    
3.iPad竖板显屏
@media screen and (max-device-width: 768px) and (orientation: portrait) {}
4.iPhone 和 Smartphones
@media screen and (min-device-width: 320px) and (min-device-width: 480px) {}

*/


/*
自由缩放属性resize
resize属性主要是用来改变元素尺寸大小的，其主要目的是增强用户体验
语法：
resize: value
属性值		取值说明
none 		用户不能拖动元素修改尺寸大小
both 		用户可以拖动元素，同时修改元素的宽度和高度
horizontal 	用户可以拖动元素，仅可以修改元素的宽度，但不能修改元素的高度
vertical 	用户可以拖动元素，仅可以修改元素的高度，但不能修改元素的宽度
inherit 	继承父元素的resize属性值
*/

/*
外轮廓属性
outline属性的基本语法如下：
outline: ［outline-color］ || [outline-style] || [outline-width] || [outline-offset] || inherit
属性值			属性值说明
outline-color 	定义轮廓线的颜色，属性值为CSS中定义的颜色值。在实际应用中，可以将此参数省略，省略时此参数的默认值为黑色。
outline-style 	定义轮廓线的样式，属性为CSS中定义线的样式。在实际应用中，可以将此参数省略，省略时此参数的默认值为none，省略后不对该轮廓线进行任何绘制。
outline-width 	定义轮廓线的宽度，属性值可以为一个宽度值。在实际应用中，可以将此参数省略，省略时此参数的默认值为medium，表示绘制中等宽度的轮廓线。
outline-offset 	定义轮廓边框的偏移位置的数值，此值可以取负数值。当此参数的值为正数值，表示轮廓边框向外偏离多少个像素；当此参数的值为负数值，表示轮廓边框向内偏移多少个像素。
inherit 		元素继承父元素的outline效果。
*/

/*
CSS生成内容

*/
