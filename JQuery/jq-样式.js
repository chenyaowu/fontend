//通过id获取元素
$("#id")
//类选择器
$(".class")
//元素选择器
$("element")
//全选择器
$("*")
/*
IE会将注释节点实现为元素，所以在IE中调用getElementsByTagName里面会包含注释节点，这个通常是不应该的
getElementById的参数在IE8及较低的版本不区分大小写
IE7及较低的版本中，表单元素中，如果表单A的name属性名用了另一个元素B的ID名并且A在B之前，那么getElementById会选中A
IE8及较低的版本，浏览器不支持getElementsByClassName
*/

/*层级选择器*/
//子选择器：选择所有指定"parent"元素中指定的"child"的直接子元素
$("parent > child")
//后代选择器：选择给定的祖父元素的所有后代元素，一个元素的后代可能是该元素的一个孩子、孙子、曾孙等
$("ancestor descendant")
//相邻兄弟选择器：选择所有紧接着"prev"元素后的"next"元素
$("prev + next")
//一般兄弟选择器：匹配"prev"元素之后的所有兄弟元素。具有相同的父元素，并匹配过滤"siblings"选择器
$("prev ~ siblings")

/*基本筛选选择器
:eq(), :lt(), :gt(), :even, :odd 用来筛选他们前面的匹配表达式的集合元素，根据之前匹配的元素在进一步筛选，注意jQuery合集都是从0开始索引
gt是一个段落筛选，从指定索引的下一个开始，gt(1) 实际从2开始
*/
//匹配第一个元素
$(":first")
//匹配最后一个元素
$(":last")
//一个用来过滤的选择器，选择所有元素去除不匹配给定的选择器元素
$(":not(selector)")
//在匹配的集合中选择索引值为index的元素
$(":eq(index)")
//选择匹配集合中所有大于给定index(索引值)的元素
$(":gt(index)")
//选择索引值为偶数的元素，从0开始计数
$(":even")
//选择索引值为奇数的元素，从0开始计数
$(":odd")
//选择匹配集合中所有索引值小于给定index参数的元素
$(":lt(index)")
//选择所有标题元素，h1,h2,h3
$(":header")
//选择指定语言的所有元素
$(":lang(language)")
//选择该文档的根元素
$(":root")
//选择所有正在执行动画效果的元素
$(":animated")

/*内容筛选选择器
:contains与:has都有查找的意思，但是contains查找包含“指定文本”的元素，has查找包含“指定元素”的元素
如果:contains匹配的文本包含在元素的子元素中，同样认为是符合条件的。
:parent与:empty是相反的，两者所涉及的子元素，包括文本节点
*/
//选择所有包含指定文本的元素
$(":contains(text")
//选择所有含有子元素或者文本的元素
$(":parent")
//选择所有没有子元素的元素(包含文本节点)
$(":empty")
//选择元素中至少包含指定选择器的元素
$(":has(selector)")

/*可见性选择器*/
//选择所有显示的元素
$(":visilbe")
//选择所有隐藏元素
$(":hidden")

/*属性筛选选择器*/
//选择指定属性值等于给定字符串或以该字符串为前缀（该字符串后跟一个连子符"-")的元素
$("[attribute|= 'value']")
//选择指定属性具有包含一个给定的字符串的元素（选择给定的属性值是包含某些值的元素）
$("[attribute*= 'value']")
//选择指定属性用空格分隔的值中包含一个给定值的元素
$("[attribute~= 'value']")
//选择指定属性是给定值的元素
$("[attribute= 'value']")
//选择不存在指定属性，或者指定的属性不等于给定值的元素
$("[attribute!= 'value']")
//选择指定属性是以给定字符串开始的元素
$("[attribute^= 'value']")
//选择指定属性是以给定值结尾的元素，这个比较是区分大小写
$("[attribute$= 'value']")
//选择所有具有指定属性的元素，改属性可以是任何值
$("[attribute]")
//选择匹配所有指定的属性筛选器的元素
$("[attributeFilter1][attributeFilterN]")

/*子元素筛选选择器
:first只匹配一个单独的元素，但是:first-child选择器可以匹配多个：即为每个父级元素匹配第一个子元素。这相当于:nth-child(1)
:last 只匹配一个单独的元素， :last-child 选择器可以匹配多个元素：即，为每个父级元素匹配最后一个子元素
如果子元素只有一个的话，:first-child与:last-child是同一个
 :only-child匹配某个元素是父元素中唯一的子元素，就是说当前子元素是父元素中唯一的元素，则匹配
jQuery实现:nth-child(n)是严格来自CSS规范，所以n值是“索引”，也就是说，从1开始计数，:nth-child(index)从1开始的，而eq(index)是从0开始的
nth-child(n) 与 :nth-last-child(n) 的区别前者是从前往后计算，后者从后往前计算
*/
//选择所有父级元素下的第一个子元素
$(":first-child") 
//选择所有父级元素下的最后一个子元素
$(":last-child")
//如果某个元素是其父元素的唯一子元素，那么它就会被选中
$(":only-child")
//选择的他们所有父元素的第n个子元素
$(":nth-child")
//选择所有他们父元素的第n个子元素。计数从最后一个元素开始到第一个
$(":nth-last-child")

/*表单元素选择器
除了input筛选选择器，几乎每个表单类别筛选器都对应一个input元素的type值。大部分表单类别筛选器可以使用属性筛选器替换。比如 $(':password') == $('[type=password]')
*/
//选择所有input,textarea,select和button元素
$(":input")
//匹配所有文本框
$(":text")
//匹配所有密码框
$(":password")
//匹配所有单选按钮
$(":radio")
//匹配所有复选框
$(":checkbox")
//匹配所有提交按钮
$(":submit")
//匹配所有图像区域
$(":image")
//匹配所有重置按钮
$(":reset")
//匹配所有按钮
$(":button")
//匹配所有文件域
$(":file")

/*表单对象属性筛选选择器
选择器适用于复选框和单选框，对于下拉框元素, 使用 :selected 选择器
在某些浏览器中，选择器:checked可能会错误选取到<option>元素，所以保险起见换用选择器input:checked，确保只会选取<input>元素
*/
//选取可用的表单元素
$(":enabled")
//选取不可用的表单元素
$(":disabled")
//选取被选中的<input>元素
$(":checked")
//选取被选中的option元素
$(":selected")

/*特殊选择器this*/
//eg:
$('p').click(function(){
    //把p元素转化成jQuery的对象
    var $this= $(this) 
    $this.css('color','red')
})


/*属性与样式
Attribute就是dom节点自带的属性 Property是这个DOM元素作为对象，其附加的内容
/* 
.attr()与.removeArre()

.attr(属性名):获取属性的值
.attr(属性名,属性值):设置属性的值
.attr(属性名,函数值):设置属性的函数值
.attr(attributes):给指定元素设置多个属性值，{属性名一: “属性值一” , 属性名二: “属性值二” , … …}

.reamoveAttr(attributeName):为匹配的元素集合中的每一个元素中移除一个属性(attribute)
--------------------------------------------------------------------------------------------------------------------------------------------------
.html()与.text()
.html()方法内部使用的是DOM的innerHTML属性来处理的，所以在设置与获取上需要注意的一个最重要的问题，这个操作是针对整个HTML内容（不仅仅只是文本内容）
.text()结果返回一个字符串，包含所有匹配元素的合并文本

.html与.text的异同:
.html与.text的方法操作是一样，只是在具体针对处理对象不同
.html处理的是元素内容，.text处理的是文本内容
.html只能使用在HTML文档中，.text 在XML 和 HTML 文档中都能使用
如果处理的对象只有一个子文本节点，那么html处理的结果与text是一样的
火狐不支持innerText属性，用了类似的textContent属性，.text()方法综合了2个属性的支持，所以可以兼容所有浏览器

.html() 不传入值，就是获取集合中第一个匹配元素的HTML内容
.html( htmlString )  设置每一个匹配元素的html内容
.html( function(index, oldhtml) ) 用来返回设置HTML内容的一个函数

.text() 得到匹配元素集合中每个元素的合并文本，包括他们的后代
.text( textString ) 用于设置匹配元素内容的文本
.text( function(index, text) ) 用来返回设置文本内容的一个函数
--------------------------------------------------------------------------------------------------------------------------------------------------
.val()
通过.val()处理select元素， 当没有选择项被选中，它返回null
.val()方法多用来设置表单的字段的值
如果select元素有multiple（多选）属性，并且至少一个选择项被选中， .val()方法返回一个数组，这个数组包含每个选中选择项的值

.val()无参数，获取匹配的元素集合中第一个元素的当前值
.val( value )，设置匹配的元素集合中每个元素的值
.val( function ) ，一个用来返回设置值的函数
如果select元素有multiple（多选）属性，并且至少一个选择项被选中， .val()方法返回一个数组，这个数组包含每个选中选择项的值
--------------------------------------------------------------------------------------------------------------------------------------------------
.addClass()与.removeClass()

.addClass()方法不会替换一个样式类名。它只是简单的添加一个样式类名到元素上
.removeClass()如果一个样式类名作为一个参数,只有这样式类会被从匹配的元素集合中删除 。 如果没有样式名作为参数，那么所有的样式类将被移除

.addClass( className ) : 为每个匹配元素所要增加的一个或多个样式名
.addClass( function(index, currentClass) ) : 这个函数返回一个或更多用空格隔开的要增加的样式名
.removeClass( [className ] )：每个匹配元素移除的一个或多个用空格隔开的样式名
.removeClass( function(index, class) ) ： 一个函数，返回一个或多个将要被移除的样式名
--------------------------------------------------------------------------------------------------------------------------------------------------
.toggleClass()
toggleClass是一个互斥的逻辑，也就是通过判断对应的元素上是否存在指定的Class名，如果有就删除，如果没有就增加
toggleClass会保留原有的Class名后新增，通过空格隔开

.toggleClass( className )：在匹配的元素集合中的每个元素上用来切换的一个或多个（用空格隔开）样式类名
.toggleClass( className, switch )：一个布尔值，用于判断样式是否应该被添加或移除
.toggleClass( [switch ] )：一个用来判断样式类添加还是移除的 布尔值
.toggleClass( function(index, class, switch) [, switch ] )：用来返回在匹配的元素集合中的每个元素上用来切换的样式类名的一个函数。接收元素的索引位置和元素旧的样式类作为参数
--------------------------------------------------------------------------------------------------------------------------------------------------
.css()
浏览器属性获取方式不同，在获取某些值的时候都jQuery采用统一的处理，比如颜色采用RBG，尺寸采用px
.css()方法支持驼峰写法与大小写混搭的写法，内部做了容错的处理
当一个数只被作为值（value）的时候， jQuery会将其转换为一个字符串，并添在字符串的结尾处添加px，例如 .css("width",50}) 与 .css("width","50px"})一样

.css( propertyName ) ：获取匹配元素集合中的第一个元素的样式属性的计算值
.css( propertyNames )：传递一组数组，返回一个对象结果
.css(propertyName, value )：设置CSS
.css( propertyName, function )：可以传入一个回调函数，返回取到对应的值进行处理
.css( properties )：可以传一个对象，同时设置多个样式

.addClass与.css方法各有利弊，一般是静态的结构，都确定了布局的规则，可以用addClass的方法，增加统一的类规则
如果是动态的HTML结构，在不确定规则，或者经常变化的情况下，一般多考虑.css()方式
*/


/*数据存储
jQuery.removeData( element [, name ] )
.removeData( [name ] )
*/

