//创建元素节点：
$("<div></div>");
//创建为本节点：
$("<div>我是文本节点</div>");
//创建为属性节点：
$("<div id='test' class='aaron'>我是文本节点</div>");

/*DOM内部插入append()与appendTo()
.append(content) 向每个匹配的元素内部追加内容

.appendTo(content) 把所有匹配的元素追加到另一个、指定的元素元素集合中


append()前面是被插入的对象，后面是要在对象内插入的元素内容
appendTo()前面是要插入的元素内容，而后面是被插入的对象
----------------------------------------------------------------------------------
DOM外部插入after()与before()
.after(content) 在匹配元素集合中的每个元素后面插入参数指定的内容，作为其兄弟节点
.before(content) 据参数设定，在匹配元素的前面插入内容

after向元素的后边添加html代码，如果元素后面有元素了，那将后面的元素后移，然后将html代码插入
before向元素的前边添加html代码，如果元素前面有元素了，那将前面的元素前移，然后将html代码插
------------------------------------------------------------------------------------
DOM内部插入prepend()与prependTo()
prepend() 向每个匹配的元素内部前置内容
prependTo() 把所有匹配的元素前置到另一个指定的元素集合中

append()向每个匹配的元素内部追加内容
prepend()向每个匹配的元素内部前置内容
appendTo()把所有匹配的元素追加到另一个指定元素的集合中
prependTo()把所有匹配的元素前置到另一个指定的元素集合中
------------------------------------------------------------------------------------
DOM外部插入insertAfter()与insertBefore()
insertBefore() 在目标元素前面插入集合中每个匹配的元素
insertAfter() 在目标元素后面插入集合中每个匹配的元素

insertAfter将JQuery封装好的元素插入到指定元素的后面，如果元素后面有元素了，那将后面的元素后移，然后将JQuery对象插入；
insertBefore将JQuery封装好的元素插入到指定元素的前面，如果元素前面有元素了，那将前面的元素前移，然后将JQuery对象插入；
------------------------------------------------------------------------------------
DOM节点删除之empty()
eg:
<div class="hello"><p>测试</p></div>
通过empty处理
$('.hello').empty()
结果：<p>测试</p>被移除
<div class="hello"></div>
------------------------------------------------------------------------------------
DOM节点删除之remove()的有参用法和无参用法
eg:
<div class="hello"><p>测试</p></div>
$('.hello').on("click",fn)
//通过remove处理
$('.hello').remove()
//结果：<div class="hello"><p>测试</p></div> 全部被移除
//节点不存在了,同事事件也会被销毁

eg:
$("p").filter(":contains('3')").remove()

remove比empty好用的地方就是可以传递一个选择器表达式用来过滤将被移除的匹配元素集合，可以选择性的删除指定的节点

empty方法

严格地讲，empty()方法并不是删除节点，而是清空节点，它能清空元素中的所有后代节点
empty不能删除自己本身这个节点
remove方法

该节点与该节点所包含的所有后代节点将同时被删除
提供传递一个筛选的表达式，删除指定合集中的元素
------------------------------------------------------------------------------------
DOM拷贝clone()
.clone()方法深度 复制所有匹配的元素集合，包括所有匹配元素、匹配元素的下级元素、文字节点。
//clone处理一
$("div").clone()   //只克隆了结构，事件丢失
//clone处理二
$("div").clone(true) //结构、事件与数据都克隆
------------------------------------------------------------------------------------
DOM替换replaceWith()和replaceAll()
.replaceWith( newContent )：用提供的内容替换集合中所有匹配的元素并且返回被删除元素的集合
.replaceAll( target ) ：用集合的匹配元素替换每个目标元素

.replaceAll()和.replaceWith()功能类似，主要是目标和源的位置区别
.replaceWith()与.replaceAll() 方法会删除与节点相关联的所有数据和事件处理程序
.replaceWith()方法，和大部分其他jQuery方法一样，返回jQuery对象，所以可以和其他方法链接使用
.replaceWith()方法返回的jQuery对象引用的是替换前的节点，而不是通过replaceWith/replaceAll方法替换后的节点
------------------------------------------------------------------------------------
DOM包裹wrap(),unwrap(),wrapAll(),wrapInner()方法
.wrap( wrappingElement )：在集合中匹配的每个元素周围包裹一个HTML结构
unwrap()，作用与wrap方法是相反的。将匹配元素集合的父级元素删除，保留自身（和兄弟元素，如果存在）在原来的位置。
.wrapAll( wrappingElement )：给集合中匹配的元素增加一个外面包裹HTML结构
.wrapInner( wrappingElement )：给集合中匹配的元素的内部，增加包裹的HTML结构

eg:
<p>p元素</p>
$('p').wrap('<div></div>')
p元素增加了一个父div的结构
<div>
    <p>p元素</p>
</div>
p元素删除了一个父div的结构
$('p').unwrap();
<p>p元素</p>
------------------------------------------------------------------------------------
遍历
children() 找合集里面的第一级子元素
children(selector) 方法是返回匹配元素集合中每个元素的所有子元素（仅儿子辈）
find() 查找DOM树中的这些元素的后代元素

find是遍历当前元素集合中每个元素的后代。只要符合，不管是儿子辈，孙子辈都可以。
与其他的树遍历方法不同，选择器表达式对于 .find() 是必需的参数。如果我们需要实现对所有后代元素的取回，可以传递通配选择器 '*'。
find只在后代中遍历，不包括自己。
选择器 context 是由 .find() 方法实现的；因此，$('.item-ii').find('li') 等价于 $('li', '.item-ii')(找到类名为item-ii的标签下的li标签)。

parent() 查找合集里面的每一个元素的父元素
parent(selector) 方法是返回匹配元素集合中每个元素的所有父元素（仅父亲辈）

parents() 查找合集里面的每一个元素的所有祖辈元素
parents(selector)

closest()方法接受一个匹配元素的选择器字符串 从元素本身开始，在DOM 树上逐级向上级元素匹配，并返回最先匹配的祖先元素
closest(selector)

next() 查找指定元素集合中每一个元素紧邻的后面同辈元素的元素集合
next(selector)

prev() 查找指定元素集合中每一个元素紧邻的前面同辈元素的元素集合
prev(selector)

siblings() 查找指定元素集合中每一个元素的同辈元素
siblings(selector)


通过$()方法找到指定的元素合集后可以进行一系列的操作。$()之后就意味着这个合集对象已经是确定的，如果后期需要再往这个合集中添加一新的元素
add方法，用来创建一个新的jQuery对象 ，元素添加到匹配的元素集合中
.add()的参数可以几乎接受任何的$()，包括一个jQuery选择器表达式，DOM元素，或HTML片段引用。


.each() 方法就是一个for循环的迭代器，它会迭代jQuery对象合集中的每一个DOM元素。每次回调函数执行时，会传递当前循环次数作为参数(从0开始计数
eg:
$("li").each(function(index, element) {
     index 索引 0,1
     element是对应的li节点 li,li
     this 指向的是li
})
*/

